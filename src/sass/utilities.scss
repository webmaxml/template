@use "sass:meta";
@use "sass:list";
@use "sass:string";

// ----------------------------------------- functions -----------------------------------------

// stripping units
@function strip-unit($value) {
  $type: meta.type-of($value);
  @if $type != number {
    @error "strip-unit() expects 'number', '#{$type}' - provided";
  }
  @return $value / ($value * 0 + 1);
}

// convert to px
@function to-px($value) {
  $type: meta.type-of($value);
  @if $type != number {
    @error "to-px() expects 'number', '#{$type}' - provided";
  }
  @return strip-unit($value) * 1px;
}

// returns var(value) or just value
@function process-var($value) {
  $is-string: meta.type-of($value) == string;
  @if $is-string {
    $is-var: string.index($value, '--') == 1;
    @return if($is-var, var($value), $value);
  } @else {
    @return $value;
  }
}

// value become dependent on --size value
@function size($value) {
  $type: meta.type-of($value);
  @if $type != number {
    @error "size() expects 'number', '#{$type}' - provided";
  }
  // one of the multiplying operands must be unitless
  // size is always px, so we need to strip the value
  @return calc(#{strip-unit($value)} * (var(--size) / 100));
}

// ----------------------------------------- prop mixin -----------------------------------------

@mixin prop($prop, $val, $breakpoints: ()) {
  $prop-type: meta.type-of($prop);
  $bp-type: meta.type-of($breakpoints);
  @if $prop-type != string {
    @error "$prop in prop() must be 'string', '#{$prop-type}' - provided";
  }
  @if $bp-type != list and $bp-type != map {
    @error "$breakpoints in prop() must be 'list' or 'map', '#{$bp-type}' - provided";
  }

  @if $val == "fluid" {
    // first and last breakpoints
    $first-bp: list.nth($breakpoints, 1); 
    $last-bp: list.nth($breakpoints, -1); 
    $last-i: list.index($breakpoints, $last-bp);

    // set first value for prop
    $first-value: to-px(list.nth($first-bp, 2));
    #{$prop}: $first-value;

    // for every breakpoint except last form fluid value
    @each $bp in $breakpoints {
      $current-i: list.index($breakpoints, $bp);

      @if $current-i != $last-i {
        $next-bp: list.nth($breakpoints, $current-i + 1);

        $vw1: to-px(list.nth($bp, 1));
        $vw2: to-px(list.nth($next-bp, 1));
        $value1: to-px(list.nth($bp, 2));
        $value2: to-px(list.nth($next-bp, 2));

        @media screen and (min-width: $vw1) {
          #{$prop}: calc(#{$value1} + #{strip-unit($value2 - $value1)} * ((100vw - #{$vw1}) / #{strip-unit($vw2 - $vw1)}));
        }
      }
    }

    // set last value for prop
    $last-vw: to-px(list.nth($last-bp, 1));
    $last-value: to-px(list.nth($last-bp, 2));

    @media screen and (min-width: $last-vw) {
      #{$prop}: $last-value;
    }
  } @else {
    #{$prop}: $val;

    @each $vw, $value in $breakpoints {
      @media screen and (min-width: to-px($vw)) {
        #{$prop}: $value;
      }
    }
  }
}

// ----------------------------------------- other mixins -----------------------------------------

@mixin cell($area, $justify: null, $align: null) {
  grid-area: $area;
  justify-self: $justify;
  align-self: $align;
}

@mixin text($ff: null, 
            $fw: null, 
            $c: null, 
            $fz: null, 
            $lh: null, 
            $tt: null, 
            $ta: null, 
            $td: null, 
            $fs: null) {
  font-family: process-var($ff);
  font-weight: process-var($fw);
  font-style: process-var($fs);
  font-size: process-var($fz);
  line-height: process-var($lh);
  color: process-var($c);
  text-transform: process-var($tt);
  text-align: process-var($ta);
  text-decoration: process-var($td);
}

@mixin flex($w: null, $j: null, $a: null) {
  display: flex;
  flex-flow: row $w;
  justify-content: $j;
  align-items: $a;
}

@mixin align-self($justify: null, $align: null) {
  justify-self: $justify;
  align-self: $align;
}

// mobile
@mixin from_360 {
  @media only screen and (min-width: 360px) {
    @content;
  }
}
@mixin from_375 {
  @media only screen and (min-width: 375px) {
    @content;
  }
}
@mixin from_393 {
  @media only screen and (min-width: 393px) {
    @content;
  }
}
@mixin from_412 {
  @media only screen and (min-width: 412px) {
    @content;
  }
}
@mixin from_480 {
  @media only screen and (min-width: 480px) {
    @content;
  }
}

// tablet
@mixin from_600 {
  @media only screen and (min-width: 600px) {
    @content;
  }
}
@mixin from_768 {
  @media only screen and (min-width: 768px) {
    @content;
  }
}
@mixin from_800 {
  @media only screen and (min-width: 800px) {
    @content;
  }
}
@mixin from_834 {
  @media only screen and (min-width: 834px) {
    @content;
  }
}
@mixin from_960 {
  @media only screen and (min-width: 960px) {
    @content;
  }
}
@mixin from_1024 {
  @media only screen and (min-width: 1024px) {
    @content;
  }
}

// desktop
@mixin from_1280 {
  @media only screen and (min-width: 1280px) {
    @content;
  }
}
@mixin from_1366 {
  @media only screen and (min-width: 1366px) {
    @content;
  }
}
@mixin from_1440 {
  @media only screen and (min-width: 1440px) {
    @content;
  }
}
@mixin from_1536 {
  @media only screen and (min-width: 1536px) {
    @content;
  }
}
@mixin from_1600 {
  @media only screen and (min-width: 1600px) {
    @content;
  }
}
@mixin from_1920 {
  @media only screen and (min-width: 1920px) {
    @content;
  }
}
@mixin from_2560 {
  @media only screen and (min-width: 2560px) {
    @content;
  }
}
@mixin from_3840 {
  @media only screen and (min-width: 3840px) {
    @content;
  }
}

@mixin from_($w) {
  @media only screen and (min-width: #{$w}px ) {
    @content;
  }
}

@mixin responsive-height($min-width, $min-height, $max-height) {
  @media only screen and ( min-width: #{$min-width}px ) {
    min-height: #{$min-height}px;
  }
  @media only screen and ( min-width: #{$min-width}px ) and ( max-height: #{$max-height}px ) {
    height: 100vh;
  }
}
